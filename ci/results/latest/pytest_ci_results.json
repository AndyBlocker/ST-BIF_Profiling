{
  "timestamp": "2025-06-09T17:44:22.040090",
  "test_runs": {
    "Import Tests": {
      "success": true,
      "execution_time": 2.480764389038086,
      "returncode": 0,
      "command": "python -m pytest tests/test_imports.py -v --tb=short --color=yes --durations=10 --junitxml=/home/zilingwei/Projects/ST-BIF_Profiling/ci/results/latest/pytest-results.xml",
      "stdout": "\u001b[1m============================= test session starts ==============================\u001b[0m\nplatform linux -- Python 3.12.2, pytest-8.3.3, pluggy-1.5.0 -- /home/zilingwei/miniconda3/bin/python\ncachedir: .pytest_cache\nrootdir: /home/zilingwei/Projects/ST-BIF_Profiling\nconfigfile: pytest.ini\n\u001b[1mcollecting ... \u001b[0mcollected 19 items\n\ntests/test_imports.py::TestCoreImports::test_snn_imports \u001b[32mPASSED\u001b[0m\u001b[32m          [  5%]\u001b[0m\ntests/test_imports.py::TestCoreImports::test_models_imports \u001b[32mPASSED\u001b[0m\u001b[32m       [ 10%]\u001b[0m\ntests/test_imports.py::TestCoreImports::test_wrapper_imports \u001b[32mPASSED\u001b[0m\u001b[32m      [ 15%]\u001b[0m\ntests/test_imports.py::TestCoreImports::test_utils_imports \u001b[32mPASSED\u001b[0m\u001b[32m        [ 21%]\u001b[0m\ntests/test_imports.py::TestCoreImports::test_cuda_operator_imports \u001b[32mPASSED\u001b[0m\u001b[32m [ 26%]\u001b[0m\ntests/test_imports.py::TestCoreImports::test_pytorch_operator_imports \u001b[32mPASSED\u001b[0m\u001b[32m [ 31%]\u001b[0m\ntests/test_imports.py::TestImportCompatibility::test_legacy_imports \u001b[32mPASSED\u001b[0m\u001b[32m [ 36%]\u001b[0m\ntests/test_imports.py::TestImportCompatibility::test_direct_class_imports \u001b[32mPASSED\u001b[0m\u001b[32m [ 42%]\u001b[0m\ntests/test_imports.py::TestImportCompatibility::test_import_without_errors \u001b[32mPASSED\u001b[0m\u001b[32m [ 47%]\u001b[0m\ntests/test_imports.py::TestModuleStructure::test_module_has_init \u001b[32mPASSED\u001b[0m\u001b[32m  [ 52%]\u001b[0m\ntests/test_imports.py::TestModuleStructure::test_submodule_structure \u001b[32mPASSED\u001b[0m\u001b[32m [ 57%]\u001b[0m\ntests/test_imports.py::TestModuleStructure::test_no_circular_imports \u001b[32mPASSED\u001b[0m\u001b[32m [ 63%]\u001b[0m\ntests/test_imports.py::TestOptionalDependencies::test_cupy_availability \u001b[32mPASSED\u001b[0m\u001b[32m [ 68%]\u001b[0m\ntests/test_imports.py::TestOptionalDependencies::test_matplotlib_availability \u001b[32mPASSED\u001b[0m\u001b[32m [ 73%]\u001b[0m\ntests/test_imports.py::TestOptionalDependencies::test_pandas_availability \u001b[32mPASSED\u001b[0m\u001b[32m [ 78%]\u001b[0m\ntests/test_imports.py::TestOptionalDependencies::test_essential_dependencies \u001b[32mPASSED\u001b[0m\u001b[32m [ 84%]\u001b[0m\ntests/test_imports.py::TestVersionCompatibility::test_torch_version \u001b[32mPASSED\u001b[0m\u001b[32m [ 89%]\u001b[0m\ntests/test_imports.py::TestVersionCompatibility::test_cuda_availability \u001b[32mPASSED\u001b[0m\u001b[32m [ 94%]\u001b[0m\ntests/test_imports.py::TestVersionCompatibility::test_python_version \u001b[32mPASSED\u001b[0m\u001b[32m [100%]\u001b[0m\n\n- generated xml file: /home/zilingwei/Projects/ST-BIF_Profiling/ci/results/latest/pytest-results.xml -\n============================= slowest 10 durations =============================\n0.83s call     tests/test_imports.py::TestCoreImports::test_snn_imports\n0.16s call     tests/test_imports.py::TestOptionalDependencies::test_pandas_availability\n0.15s call     tests/test_imports.py::TestOptionalDependencies::test_matplotlib_availability\n0.08s call     tests/test_imports.py::TestVersionCompatibility::test_cuda_availability\n\n(6 durations < 0.005s hidden.  Use -vv to show these durations.)\n\u001b[32m============================== \u001b[32m\u001b[1m19 passed\u001b[0m\u001b[32m in 1.24s\u001b[0m\u001b[32m ==============================\u001b[0m\n",
      "stderr": "",
      "test_summary": {
        "passed": 0,
        "failed": 0,
        "errors": 0,
        "skipped": 0
      }
    },
    "Basic CUDA Tests": {
      "success": false,
      "execution_time": 1.710960865020752,
      "returncode": 1,
      "command": "python -m pytest tests/test_cuda_kernels.py -m not slow and not performance -v --tb=short --color=yes --durations=10 --junitxml=/home/zilingwei/Projects/ST-BIF_Profiling/ci/results/latest/pytest-results.xml",
      "stdout": "\u001b[1m============================= test session starts ==============================\u001b[0m\nplatform linux -- Python 3.12.2, pytest-8.3.3, pluggy-1.5.0 -- /home/zilingwei/miniconda3/bin/python\ncachedir: .pytest_cache\nrootdir: /home/zilingwei/Projects/ST-BIF_Profiling\nconfigfile: pytest.ini\n\u001b[1mcollecting ... \u001b[0mcollected 22 items / 3 deselected / 19 selected\n\ntests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_forward_equivalence_original_vs_new[shape0-fp32] \u001b[32mPASSED\u001b[0m\u001b[32m [  5%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_forward_equivalence_original_vs_new[shape0-fp16] \u001b[32mPASSED\u001b[0m\u001b[32m [ 10%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_forward_equivalence_original_vs_new[shape1-fp32] \u001b[32mPASSED\u001b[0m\u001b[32m [ 15%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_forward_equivalence_original_vs_new[shape1-fp16] \u001b[32mPASSED\u001b[0m\u001b[32m [ 21%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_forward_equivalence_original_vs_new[shape2-fp32] \u001b[32mPASSED\u001b[0m\u001b[32m [ 26%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_forward_equivalence_original_vs_new[shape2-fp16] \u001b[32mPASSED\u001b[0m\u001b[32m [ 31%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_backward_equivalence_original_vs_new[shape0-fp32] \u001b[32mPASSED\u001b[0m\u001b[32m [ 36%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_backward_equivalence_original_vs_new[shape1-fp32] \u001b[32mPASSED\u001b[0m\u001b[32m [ 42%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_cuda_vs_pytorch_reference[fp32] \u001b[32mPASSED\u001b[0m\u001b[32m [ 47%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelRegression::test_basic_functionality_regression \u001b[32mPASSED\u001b[0m\u001b[32m [ 52%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[32-1] \u001b[31mFAILED\u001b[0m\u001b[31m [ 57%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[32-8] \u001b[31mFAILED\u001b[0m\u001b[31m [ 63%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[32-32] \u001b[31mFAILED\u001b[0m\u001b[31m [ 68%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[64-1] \u001b[31mFAILED\u001b[0m\u001b[31m [ 73%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[64-8] \u001b[31mFAILED\u001b[0m\u001b[31m [ 78%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[64-32] \u001b[31mFAILED\u001b[0m\u001b[31m [ 84%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[128-1] \u001b[31mFAILED\u001b[0m\u001b[31m [ 89%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[128-8] \u001b[31mFAILED\u001b[0m\u001b[31m [ 94%]\u001b[0m\ntests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[128-32] \u001b[31mFAILED\u001b[0m\u001b[31m [100%]\u001b[0m\n\n=================================== FAILURES ===================================\n\u001b[31m\u001b[1m_____ TestCUDAKernelRegression.test_different_dimensions_regression[32-1] ______\u001b[0m\n\u001b[1m\u001b[31mtests/test_cuda_kernels.py\u001b[0m:331: in test_different_dimensions_regression\n    assert T.shape == (batch_size, features)\n\u001b[1m\u001b[31mE   AssertionError: assert torch.Size([8, 1, 32]) == (1, 32)\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     At index 0 diff: 8 != 1\u001b[0m\n\u001b[1m\u001b[31mE     Left contains one more item: 32\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     Full diff:\u001b[0m\n\u001b[1m\u001b[31mE     + torch.Size([8, 1, 32])\u001b[0m\n\u001b[1m\u001b[31mE     - (...\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     ...Full output truncated (3 lines hidden), use '-vv' to show\u001b[0m\n\u001b[31m\u001b[1m_____ TestCUDAKernelRegression.test_different_dimensions_regression[32-8] ______\u001b[0m\n\u001b[1m\u001b[31mtests/test_cuda_kernels.py\u001b[0m:331: in test_different_dimensions_regression\n    assert T.shape == (batch_size, features)\n\u001b[1m\u001b[31mE   AssertionError: assert torch.Size([8, 8, 32]) == (8, 32)\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     At index 1 diff: 8 != 32\u001b[0m\n\u001b[1m\u001b[31mE     Left contains one more item: 32\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     Full diff:\u001b[0m\n\u001b[1m\u001b[31mE     + torch.Size([8, 8, 32])\u001b[0m\n\u001b[1m\u001b[31mE     - (...\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     ...Full output truncated (3 lines hidden), use '-vv' to show\u001b[0m\n\u001b[31m\u001b[1m_____ TestCUDAKernelRegression.test_different_dimensions_regression[32-32] _____\u001b[0m\n\u001b[1m\u001b[31mtests/test_cuda_kernels.py\u001b[0m:331: in test_different_dimensions_regression\n    assert T.shape == (batch_size, features)\n\u001b[1m\u001b[31mE   AssertionError: assert torch.Size([8, 32, 32]) == (32, 32)\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     At index 0 diff: 8 != 32\u001b[0m\n\u001b[1m\u001b[31mE     Left contains one more item: 32\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     Full diff:\u001b[0m\n\u001b[1m\u001b[31mE     + torch.Size([8, 32, 32])\u001b[0m\n\u001b[1m\u001b[31mE     - (...\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     ...Full output truncated (3 lines hidden), use '-vv' to show\u001b[0m\n\u001b[31m\u001b[1m_____ TestCUDAKernelRegression.test_different_dimensions_regression[64-1] ______\u001b[0m\n\u001b[1m\u001b[31mtests/test_cuda_kernels.py\u001b[0m:331: in test_different_dimensions_regression\n    assert T.shape == (batch_size, features)\n\u001b[1m\u001b[31mE   AssertionError: assert torch.Size([8, 1, 64]) == (1, 64)\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     At index 0 diff: 8 != 1\u001b[0m\n\u001b[1m\u001b[31mE     Left contains one more item: 64\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     Full diff:\u001b[0m\n\u001b[1m\u001b[31mE     + torch.Size([8, 1, 64])\u001b[0m\n\u001b[1m\u001b[31mE     - (...\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     ...Full output truncated (3 lines hidden), use '-vv' to show\u001b[0m\n\u001b[31m\u001b[1m_____ TestCUDAKernelRegression.test_different_dimensions_regression[64-8] ______\u001b[0m\n\u001b[1m\u001b[31mtests/test_cuda_kernels.py\u001b[0m:331: in test_different_dimensions_regression\n    assert T.shape == (batch_size, features)\n\u001b[1m\u001b[31mE   AssertionError: assert torch.Size([8, 8, 64]) == (8, 64)\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     At index 1 diff: 8 != 64\u001b[0m\n\u001b[1m\u001b[31mE     Left contains one more item: 64\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     Full diff:\u001b[0m\n\u001b[1m\u001b[31mE     + torch.Size([8, 8, 64])\u001b[0m\n\u001b[1m\u001b[31mE     - (...\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     ...Full output truncated (3 lines hidden), use '-vv' to show\u001b[0m\n\u001b[31m\u001b[1m_____ TestCUDAKernelRegression.test_different_dimensions_regression[64-32] _____\u001b[0m\n\u001b[1m\u001b[31mtests/test_cuda_kernels.py\u001b[0m:331: in test_different_dimensions_regression\n    assert T.shape == (batch_size, features)\n\u001b[1m\u001b[31mE   AssertionError: assert torch.Size([8, 32, 64]) == (32, 64)\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     At index 0 diff: 8 != 32\u001b[0m\n\u001b[1m\u001b[31mE     Left contains one more item: 64\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     Full diff:\u001b[0m\n\u001b[1m\u001b[31mE     + torch.Size([8, 32, 64])\u001b[0m\n\u001b[1m\u001b[31mE     - (...\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     ...Full output truncated (3 lines hidden), use '-vv' to show\u001b[0m\n\u001b[31m\u001b[1m_____ TestCUDAKernelRegression.test_different_dimensions_regression[128-1] _____\u001b[0m\n\u001b[1m\u001b[31mtests/test_cuda_kernels.py\u001b[0m:331: in test_different_dimensions_regression\n    assert T.shape == (batch_size, features)\n\u001b[1m\u001b[31mE   AssertionError: assert torch.Size([8, 1, 128]) == (1, 128)\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     At index 0 diff: 8 != 1\u001b[0m\n\u001b[1m\u001b[31mE     Left contains one more item: 128\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     Full diff:\u001b[0m\n\u001b[1m\u001b[31mE     + torch.Size([8, 1, 128])\u001b[0m\n\u001b[1m\u001b[31mE     - (...\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     ...Full output truncated (3 lines hidden), use '-vv' to show\u001b[0m\n\u001b[31m\u001b[1m_____ TestCUDAKernelRegression.test_different_dimensions_regression[128-8] _____\u001b[0m\n\u001b[1m\u001b[31mtests/test_cuda_kernels.py\u001b[0m:331: in test_different_dimensions_regression\n    assert T.shape == (batch_size, features)\n\u001b[1m\u001b[31mE   AssertionError: assert torch.Size([8, 8, 128]) == (8, 128)\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     At index 1 diff: 8 != 128\u001b[0m\n\u001b[1m\u001b[31mE     Left contains one more item: 128\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     Full diff:\u001b[0m\n\u001b[1m\u001b[31mE     + torch.Size([8, 8, 128])\u001b[0m\n\u001b[1m\u001b[31mE     - (...\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     ...Full output truncated (3 lines hidden), use '-vv' to show\u001b[0m\n\u001b[31m\u001b[1m____ TestCUDAKernelRegression.test_different_dimensions_regression[128-32] _____\u001b[0m\n\u001b[1m\u001b[31mtests/test_cuda_kernels.py\u001b[0m:331: in test_different_dimensions_regression\n    assert T.shape == (batch_size, features)\n\u001b[1m\u001b[31mE   AssertionError: assert torch.Size([8, 32, 128]) == (32, 128)\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     At index 0 diff: 8 != 32\u001b[0m\n\u001b[1m\u001b[31mE     Left contains one more item: 128\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     Full diff:\u001b[0m\n\u001b[1m\u001b[31mE     + torch.Size([8, 32, 128])\u001b[0m\n\u001b[1m\u001b[31mE     - (...\u001b[0m\n\u001b[1m\u001b[31mE     \u001b[0m\n\u001b[1m\u001b[31mE     ...Full output truncated (3 lines hidden), use '-vv' to show\u001b[0m\n- generated xml file: /home/zilingwei/Projects/ST-BIF_Profiling/ci/results/latest/pytest-results.xml -\n============================= slowest 10 durations =============================\n0.32s call     tests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_forward_equivalence_original_vs_new[shape0-fp32]\n0.05s setup    tests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_forward_equivalence_original_vs_new[shape0-fp32]\n0.04s call     tests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[32-1]\n0.01s call     tests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[64-1]\n0.01s call     tests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[32-8]\n0.01s call     tests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_forward_equivalence_original_vs_new[shape0-fp16]\n0.01s call     tests/test_cuda_kernels.py::TestCUDAKernelEquivalence::test_backward_equivalence_original_vs_new[shape0-fp32]\n0.01s call     tests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[32-32]\n0.01s call     tests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[128-32]\n0.01s call     tests/test_cuda_kernels.py::TestCUDAKernelRegression::test_different_dimensions_regression[128-8]\n\u001b[36m\u001b[1m=========================== short test summary info ============================\u001b[0m\n\u001b[31mFAILED\u001b[0m tests/test_cuda_kernels.py::\u001b[1mTestCUDAKernelRegression::test_different_dimensions_regression[32-1]\u001b[0m - AssertionError: assert torch.Size([8, 1, 32]) == (1, 32)\n\u001b[31mFAILED\u001b[0m tests/test_cuda_kernels.py::\u001b[1mTestCUDAKernelRegression::test_different_dimensions_regression[32-8]\u001b[0m - AssertionError: assert torch.Size([8, 8, 32]) == (8, 32)\n\u001b[31mFAILED\u001b[0m tests/test_cuda_kernels.py::\u001b[1mTestCUDAKernelRegression::test_different_dimensions_regression[32-32]\u001b[0m - AssertionError: assert torch.Size([8, 32, 32]) == (32, 32)\n\u001b[31mFAILED\u001b[0m tests/test_cuda_kernels.py::\u001b[1mTestCUDAKernelRegression::test_different_dimensions_regression[64-1]\u001b[0m - AssertionError: assert torch.Size([8, 1, 64]) == (1, 64)\n\u001b[31mFAILED\u001b[0m tests/test_cuda_kernels.py::\u001b[1mTestCUDAKernelRegression::test_different_dimensions_regression[64-8]\u001b[0m - AssertionError: assert torch.Size([8, 8, 64]) == (8, 64)\n\u001b[31mFAILED\u001b[0m tests/test_cuda_kernels.py::\u001b[1mTestCUDAKernelRegression::test_different_dimensions_regression[64-32]\u001b[0m - AssertionError: assert torch.Size([8, 32, 64]) == (32, 64)\n\u001b[31mFAILED\u001b[0m tests/test_cuda_kernels.py::\u001b[1mTestCUDAKernelRegression::test_different_dimensions_regression[128-1]\u001b[0m - AssertionError: assert torch.Size([8, 1, 128]) == (1, 128)\n\u001b[31mFAILED\u001b[0m tests/test_cuda_kernels.py::\u001b[1mTestCUDAKernelRegression::test_different_dimensions_regression[128-8]\u001b[0m - AssertionError: assert torch.Size([8, 8, 128]) == (8, 128)\n\u001b[31mFAILED\u001b[0m tests/test_cuda_kernels.py::\u001b[1mTestCUDAKernelRegression::test_different_dimensions_regression[128-32]\u001b[0m - AssertionError: assert torch.Size([8, 32, 128]) == (32, 128)\n\u001b[31m================== \u001b[31m\u001b[1m9 failed\u001b[0m, \u001b[32m10 passed\u001b[0m, \u001b[33m3 deselected\u001b[0m\u001b[31m in 0.68s\u001b[0m\u001b[31m ==================\u001b[0m\n",
      "stderr": "",
      "test_summary": {
        "passed": 0,
        "failed": 0,
        "errors": 0,
        "skipped": 0
      }
    }
  },
  "summary": {
    "total_test_suites": 2,
    "passed_test_suites": 1,
    "failed_test_suites": 1,
    "overall_success": false
  },
  "git_commit": {
    "branch": "ci-infrastructure",
    "commit": "b2f8072cae4972349c734265ab28cbbd842b675e"
  }
}